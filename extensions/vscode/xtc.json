{
  "fileTypes": [
    "txt"
  ],
  "name": "Custom Language",
  "scopeName": "source.custom",
  "patterns": [
    {
      "include": "#QualifiedName"
    },
    {
      "include": "#Name"
    },
    {
      "include": "#Modifiers"
    },
    {
      "include": "#Modifier"
    },
    {
      "include": "#AccessModifier"
    },
    {
      "include": "#Annotation"
    },
    {
      "include": "#Annotations"
    },
    {
      "include": "#ParameterList"
    },
    {
      "include": "#Parameters"
    },
    {
      "include": "#Parameter"
    },
    {
      "include": "#TypeExpression"
    },
    {
      "include": "#DefaultValue"
    },
    {
      "include": "#ArgumentList"
    },
    {
      "include": "#Arguments"
    },
    {
      "include": "#Argument"
    },
    {
      "include": "#NamedArgument"
    },
    {
      "include": "#ArgumentExpression"
    },
    {
      "include": "#Expression"
    },
    {
      "include": "#TypeParameterList"
    },
    {
      "include": "#TypeParameters"
    },
    {
      "include": "#TypeParameter"
    },
    {
      "include": "#TypeParameterConstraint"
    },
    {
      "include": "#TypeParameterTypeList"
    },
    {
      "include": "#TypeExpressionList"
    },
    {
      "include": "#TypeExpressionListElement"
    },
    {
      "include": "#ExtendedTypeExpression"
    },
    {
      "include": "#CompilationUnit"
    },
    {
      "include": "#ImportStatements"
    },
    {
      "include": "#ImportStatement"
    },
    {
      "include": "#TypeCompositionStatement"
    },
    {
      "include": "#Category"
    },
    {
      "include": "#Compositions"
    },
    {
      "include": "#ConditionalComposition"
    },
    {
      "include": "#IfComposition"
    },
    {
      "include": "#Composition"
    },
    {
      "include": "#ElseComposition"
    },
    {
      "include": "#ExtendsList"
    },
    {
      "include": "#ExtendsSingle"
    },
    {
      "include": "#ImplementsList"
    },
    {
      "include": "#ImplementsSingle"
    },
    {
      "include": "#DelegatesList"
    },
    {
      "include": "#DelegatesSingle"
    },
    {
      "include": "#AnyTypeExpression"
    },
    {
      "include": "#IncorporatesList"
    },
    {
      "include": "#IncorporatesSingle"
    },
    {
      "include": "#ImportModifier"
    },
    {
      "include": "#VersionRequirement"
    },
    {
      "include": "#Version"
    },
    {
      "include": "#VersionOverrides"
    },
    {
      "include": "#VersionOverride"
    },
    {
      "include": "#VersionOverrideVerb"
    },
    {
      "include": "#Versions"
    },
    {
      "include": "#VersionLiteral"
    },
    {
      "include": "#ResourceProvider"
    },
    {
      "include": "#ResourceList"
    },
    {
      "include": "#ResourceListContents"
    },
    {
      "include": "#Resources"
    },
    {
      "include": "#Resource"
    },
    {
      "include": "#ResourceFinish"
    },
    {
      "include": "#TypeCompositionBody"
    },
    {
      "include": "#EnumBody"
    },
    {
      "include": "#Enums"
    },
    {
      "include": "#Enum"
    },
    {
      "include": "#EnumBodyFinish"
    },
    {
      "include": "#TypeCompositionComponents"
    },
    {
      "include": "#ConditionalTypeCompositionComponent"
    },
    {
      "include": "#IfTypeCompositionComponent"
    },
    {
      "include": "#TypeCompositionComponent"
    },
    {
      "include": "#ElseTypeCompositionComponent"
    },
    {
      "include": "#PropertyDeclarationStatement"
    },
    {
      "include": "#MethodDeclarationStatement"
    },
    {
      "include": "#PropertyModifiers"
    },
    {
      "include": "#PropertyModifier"
    },
    {
      "include": "#PropertyAccessModifier"
    },
    {
      "include": "#PropertyDeclarationFinish"
    },
    {
      "include": "#PropertyDeclarationInitialValue"
    },
    {
      "include": "#MethodModifiers"
    },
    {
      "include": "#MethodModifier"
    },
    {
      "include": "#MethodIdentity"
    },
    {
      "include": "#ReturnList"
    },
    {
      "include": "#SingleReturnList"
    },
    {
      "include": "#MultiReturnList"
    },
    {
      "include": "#MultiReturn"
    },
    {
      "include": "#RedundantReturnSpecifier"
    },
    {
      "include": "#MethodDeclarationFinish"
    },
    {
      "include": "#StatementBlock"
    },
    {
      "include": "#Statement"
    },
    {
      "include": "#VariableDeclaration"
    },
    {
      "include": "#Assignment"
    },
    {
      "include": "#LabeledStatement"
    },
    {
      "include": "#AssertStatement"
    },
    {
      "include": "#BreakStatement"
    },
    {
      "include": "#ContinueStatement"
    },
    {
      "include": "#DoStatement"
    },
    {
      "include": "#ForStatement"
    },
    {
      "include": "#IfStatement"
    },
    {
      "include": "#ReturnStatement"
    },
    {
      "include": "#SwitchStatement"
    },
    {
      "include": "#TryStatement"
    },
    {
      "include": "#TypeDefStatement"
    },
    {
      "include": "#UsingStatement"
    },
    {
      "include": "#WhileStatement"
    },
    {
      "include": "#Statements"
    },
    {
      "include": "#VariableTypeExpression"
    },
    {
      "include": "#VariableInitializerFinish"
    },
    {
      "include": "#OptionalDeclarationList"
    },
    {
      "include": "#OptionalDeclaration"
    },
    {
      "include": "#Assignable"
    },
    {
      "include": "#Assignee"
    },
    {
      "include": "#AssignableList"
    },
    {
      "include": "#TernaryExpression"
    },
    {
      "include": "#AssignmentOperator"
    },
    {
      "include": "#AssertInstruction"
    },
    {
      "include": "#AssertMessage"
    },
    {
      "include": "#ForCondition"
    },
    {
      "include": "#VariableInitializationList"
    },
    {
      "include": "#VariableInitializer"
    },
    {
      "include": "#VariableModificationList"
    },
    {
      "include": "#VariableModification"
    },
    {
      "include": "#ElseStatement"
    },
    {
      "include": "#ConditionList"
    },
    {
      "include": "#Condition"
    },
    {
      "include": "#ConditionalAssignmentCondition"
    },
    {
      "include": "#ConditionalAssignmentOp"
    },
    {
      "include": "#ImportFinish"
    },
    {
      "include": "#NoWhitespace"
    },
    {
      "include": "#ReturnValue"
    },
    {
      "include": "#TupleLiteral"
    },
    {
      "include": "#ExpressionList"
    },
    {
      "include": "#SwitchCondition"
    },
    {
      "include": "#SwitchConditionExpression"
    },
    {
      "include": "#SwitchBlocks"
    },
    {
      "include": "#SwitchBlock"
    },
    {
      "include": "#SwitchLabels"
    },
    {
      "include": "#SwitchLabel"
    },
    {
      "include": "#SwitchBlockFinish"
    },
    {
      "include": "#CaseOptionList"
    },
    {
      "include": "#CaseOption"
    },
    {
      "include": "#SafeCaseExpression"
    },
    {
      "include": "#CaseExpressionList"
    },
    {
      "include": "#CaseExpression"
    },
    {
      "include": "#TryResources"
    },
    {
      "include": "#TryFinish"
    },
    {
      "include": "#Catches"
    },
    {
      "include": "#Catch"
    },
    {
      "include": "#UsingResources"
    },
    {
      "include": "#UsingResource"
    },
    {
      "include": "#ElseExpression"
    },
    {
      "include": "#OrExpression"
    },
    {
      "include": "#AndExpression"
    },
    {
      "include": "#EqualityExpression"
    },
    {
      "include": "#RelationalExpression"
    },
    {
      "include": "#AssignmentExpression"
    },
    {
      "include": "#RangeExpression"
    },
    {
      "include": "#BitwiseExpression"
    },
    {
      "include": "#AdditiveExpression"
    },
    {
      "include": "#MultiplicativeExpression"
    },
    {
      "include": "#ElvisExpression"
    },
    {
      "include": "#PrefixExpression"
    },
    {
      "include": "#PostfixExpression"
    },
    {
      "include": "#PrimaryExpression"
    },
    {
      "include": "#ArrayDims"
    },
    {
      "include": "#DimIndicators"
    },
    {
      "include": "#DimIndicator"
    },
    {
      "include": "#ArrayIndexes"
    },
    {
      "include": "#DotNameFinish"
    },
    {
      "include": "#NewFinish"
    },
    {
      "include": "#NewArguments"
    },
    {
      "include": "#StatementExpression"
    },
    {
      "include": "#SwitchExpression"
    },
    {
      "include": "#LambdaExpression"
    },
    {
      "include": "#Literal"
    },
    {
      "include": "#AnonClassBody"
    },
    {
      "include": "#SwitchExpressionBlocks"
    },
    {
      "include": "#SwitchExpressionBlock"
    },
    {
      "include": "#LambdaInputs"
    },
    {
      "include": "#LambdaParameterName"
    },
    {
      "include": "#LambdaInferredList"
    },
    {
      "include": "#LambdaParameterList"
    },
    {
      "include": "#LambdaParameterNames"
    },
    {
      "include": "#LambdaParameters"
    },
    {
      "include": "#LambdaParameter"
    },
    {
      "include": "#LambdaBody"
    },
    {
      "include": "#TodoFinish"
    },
    {
      "include": "#InputCharacter"
    },
    {
      "include": "#TypedNumericLiteral"
    },
    {
      "include": "#IntLiteral"
    },
    {
      "include": "#FPDecimalLiteral"
    },
    {
      "include": "#FPBinaryLiteral"
    },
    {
      "include": "#CharLiteral"
    },
    {
      "include": "#StringLiteral"
    },
    {
      "include": "#BinaryLiteral"
    },
    {
      "include": "#ListLiteral"
    },
    {
      "include": "#MapLiteral"
    },
    {
      "include": "#DateLiteral"
    },
    {
      "include": "#TimeOfDayLiteral"
    },
    {
      "include": "#TimeLiteral"
    },
    {
      "include": "#TimeZoneLiteral"
    },
    {
      "include": "#DurationLiteral"
    },
    {
      "include": "#PathLiteral"
    },
    {
      "include": "#FileLiteral"
    },
    {
      "include": "#DirectoryLiteral"
    },
    {
      "include": "#FileStoreLiteral"
    },
    {
      "include": "#IntTypeName"
    },
    {
      "include": "#FPTypeName"
    },
    {
      "include": "#FPLiteral"
    },
    {
      "include": "#FreeformLiteral"
    },
    {
      "include": "#FreeformChars"
    },
    {
      "include": "#FreeformLines"
    },
    {
      "include": "#FreeformLine"
    },
    {
      "include": "#Whitespace"
    },
    {
      "include": "#FreeformChar"
    },
    {
      "include": "#CollectionLiteral"
    },
    {
      "include": "#Entries"
    },
    {
      "include": "#Entry"
    },
    {
      "include": "#VersionString"
    },
    {
      "include": "#NonGASuffix"
    },
    {
      "include": "#VersionNumbers"
    },
    {
      "include": "#DigitsNoUnderscores"
    },
    {
      "include": "#VersionFinish"
    },
    {
      "include": "#NonGAPrefix"
    },
    {
      "include": "#NonGAVersion"
    },
    {
      "include": "#Build"
    },
    {
      "include": "#BuildChars"
    },
    {
      "include": "#BuildChar"
    },
    {
      "include": "#Seconds"
    },
    {
      "include": "#SecondsFraction"
    },
    {
      "include": "#TimeZone"
    },
    {
      "include": "#MinutesOffset"
    },
    {
      "include": "#TimeDuration"
    },
    {
      "include": "#YearsDuration"
    },
    {
      "include": "#MonthsDuration"
    },
    {
      "include": "#DaysDuration"
    },
    {
      "include": "#HoursDuration"
    },
    {
      "include": "#MinutesDuration"
    },
    {
      "include": "#SecondsDuration"
    },
    {
      "include": "#File"
    },
    {
      "include": "#Dir"
    },
    {
      "include": "#DirElements"
    },
    {
      "include": "#DirElement"
    },
    {
      "include": "#PathName"
    },
    {
      "include": "#PathNameParts"
    },
    {
      "include": "#PathNamePart"
    },
    {
      "include": "#IdentifierTrails"
    },
    {
      "include": "#PathNameSpecial"
    },
    {
      "include": "#IdentifierTrail"
    },
    {
      "include": "#IntersectingTypeExpression"
    },
    {
      "include": "#ExtendedIntersectingTypeExpression"
    },
    {
      "include": "#UnionedTypeExpression"
    },
    {
      "include": "#ExtendedUnionedTypeExpression"
    },
    {
      "include": "#PrefixTypeExpression"
    },
    {
      "include": "#ExtendedPrefixTypeExpression"
    },
    {
      "include": "#TypeAccessModifier"
    },
    {
      "include": "#PostfixTypeExpression"
    },
    {
      "include": "#PrimaryTypeExpression"
    },
    {
      "include": "#ExtendedPostfixTypeExpression"
    },
    {
      "include": "#ExtendedPrimaryTypeExpression"
    },
    {
      "include": "#NamedTypeExpression"
    },
    {
      "include": "#FunctionTypeExpression"
    },
    {
      "include": "#AnonTypeExpression"
    },
    {
      "include": "#NamedTypeExpressionPart"
    },
    {
      "include": "#NoAutoNarrowModifier"
    },
    {
      "include": "#TypeValueSet"
    },
    {
      "include": "#TypeValueList"
    },
    {
      "include": "#TypeValue"
    },
    {
      "include": "#NameOrSignatureList"
    },
    {
      "include": "#NameOrSignature"
    }
  ],
  "repository": {
    "QualifiedName": {
      "patterns": [
        {
          "include": "#NoAutoNarrowModifier-opt TypeParameterTypeList-opt TypeValueSet-opt"
        }
      ]
    },
    "Name": {
      "patterns": [
        {
          "include": "## ref to 1+ property/method"
        }
      ]
    },
    "Modifiers": {
      "patterns": [
        {
          "include": "#-opt Category QualifiedName TypeParameterList-opt ParameterList-opt Compositions-opt TypeCompositionBody"
        }
      ]
    },
    "Modifier": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "AccessModifier": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Annotation": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Annotations": {
      "patterns": [
        {
          "include": "#-opt Name TypeParameterTypeList-opt ArgumentList-opt TypeCompositionBody-opt"
        }
      ]
    },
    "ParameterList": {
      "patterns": [
        {
          "match": "\\(\\ Parameters\\ \\)"
        }
      ]
    },
    "Parameters": {
      "patterns": [
        {
          "match": ",\\ Parameter"
        }
      ]
    },
    "Parameter": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "TypeExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "DefaultValue": {
      "patterns": [
        {
          "match": "=\\ Expression"
        }
      ]
    },
    "ArgumentList": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Arguments": {
      "patterns": [
        {
          "match": ",\\ Argument"
        }
      ]
    },
    "Argument": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "NamedArgument": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ArgumentExpression": {
      "patterns": [
        {
          "match": "_\\ <\\ ExtendedTypeExpression\\ >\\ _"
        }
      ]
    },
    "Expression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "TypeParameterList": {
      "patterns": [
        {
          "match": "<\\ TypeParameters\\ >"
        }
      ]
    },
    "TypeParameters": {
      "patterns": [
        {
          "match": ",\\ TypeParameter"
        }
      ]
    },
    "TypeParameter": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "TypeParameterConstraint": {
      "patterns": [
        {
          "match": "extends\\ ExtendedTypeExpression"
        }
      ]
    },
    "TypeParameterTypeList": {
      "patterns": [
        {
          "match": "\\#\\ indicates\\ a\\ type\\ sequence\\ type"
        }
      ]
    },
    "TypeExpressionList": {
      "patterns": [
        {
          "match": ",\\ TypeExpressionListElement"
        }
      ]
    },
    "TypeExpressionListElement": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ExtendedTypeExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "CompilationUnit": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ImportStatements": {
      "patterns": [
        {
          "include": "#ImportStatement"
        }
      ]
    },
    "ImportStatement": {
      "patterns": [
        {
          "match": "import\\ QualifiedName\\ ImportFinish"
        }
      ]
    },
    "TypeCompositionStatement": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Category": {
      "patterns": [
        {
          "match": "module\\ package\\ class\\ interface\\ service\\ const\\ enum\\ mixin"
        }
      ]
    },
    "Compositions": {
      "patterns": [
        {
          "include": "#ConditionalComposition"
        }
      ]
    },
    "ConditionalComposition": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "IfComposition": {
      "patterns": [
        {
          "match": "if\\ \\(\\ Expression\\ \\)\\ \\{\\ Compositions\\ \\}\\ ElseComposition\\-opt"
        }
      ]
    },
    "Composition": {
      "patterns": [
        {
          "match": "extends\\ ExtendsList\\ implements\\ ImplementsList\\ delegates\\ DelegatesList\\ incorporates\\ IncorporatesList\\ into\\ AnyTypeExpression\\ import\\ ImportModifier\\-opt\\ QualifiedName\\ VersionRequirement\\-opt\\ ResourceProvider\\-opt\\ default\\ \\(\\ Expression\\ \\)"
        }
      ]
    },
    "ElseComposition": {
      "patterns": [
        {
          "match": "else\\ IfComposition\\ else\\ \\{\\ Compositions\\ \\}"
        }
      ]
    },
    "ExtendsList": {
      "patterns": [
        {
          "match": ",\\ ExtendsSingle"
        }
      ]
    },
    "ExtendsSingle": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ImplementsList": {
      "patterns": [
        {
          "match": ",\\ ImplementsSingle"
        }
      ]
    },
    "ImplementsSingle": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "DelegatesList": {
      "patterns": [
        {
          "match": ",\\ DelegatesSingle"
        }
      ]
    },
    "DelegatesSingle": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "AnyTypeExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "IncorporatesList": {
      "patterns": [
        {
          "match": ",\\ IncorporatesSingle"
        }
      ]
    },
    "IncorporatesSingle": {
      "patterns": [
        {
          "match": "conditional\\ QualifiedName\\ TypeParameterList\\ ArgumentList\\-opt"
        }
      ]
    },
    "ImportModifier": {
      "patterns": [
        {
          "match": "embedded\\ required\\ desired\\ optional"
        }
      ]
    },
    "VersionRequirement": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Version": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "VersionOverrides": {
      "patterns": [
        {
          "match": ",\\ VersionOverride"
        }
      ]
    },
    "VersionOverride": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "VersionOverrideVerb": {
      "patterns": [
        {
          "match": "allow\\ avoid\\ prefer"
        }
      ]
    },
    "Versions": {
      "patterns": [
        {
          "match": ",\\ Version"
        }
      ]
    },
    "VersionLiteral": {
      "patterns": [
        {
          "match": "Version:\\ NoWhitespace\\ VersionString\\ v:\\ NoWhitespace\\ VersionString"
        }
      ]
    },
    "ResourceProvider": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ResourceList": {
      "patterns": [
        {
          "match": "inject\\ \\(\\ ResourceListContents\\-opt\\ \\)"
        }
      ]
    },
    "ResourceListContents": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Resources": {
      "patterns": [
        {
          "match": ",\\ Resource"
        }
      ]
    },
    "Resource": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ResourceFinish": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "TypeCompositionBody": {
      "patterns": [
        {
          "include": "#PropertyDeclarationInitialValue-opt"
        }
      ]
    },
    "EnumBody": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Enums": {
      "patterns": [
        {
          "match": ",\\ Enum"
        }
      ]
    },
    "Enum": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "EnumBodyFinish": {
      "patterns": [
        {
          "match": ";\\ TypeCompositionComponents"
        }
      ]
    },
    "TypeCompositionComponents": {
      "patterns": [
        {
          "include": "#ConditionalTypeCompositionComponent"
        }
      ]
    },
    "ConditionalTypeCompositionComponent": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "IfTypeCompositionComponent": {
      "patterns": [
        {
          "match": "if\\ \\(\\ Expression\\ \\)\\ \\{\\ TypeCompositionComponents\\ \\}\\ ElseTypeCompositionComponent\\-opt"
        }
      ]
    },
    "TypeCompositionComponent": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ElseTypeCompositionComponent": {
      "patterns": [
        {
          "match": "else\\ IfTypeCompositionComponent\\ else\\ \\{\\ TypeCompositionComponents\\ \\}"
        }
      ]
    },
    "PropertyDeclarationStatement": {
      "patterns": [
        {
          "match": "\\#\\ note:\\ always\\ static\\ or\\ private"
        }
      ]
    },
    "MethodDeclarationStatement": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "PropertyModifiers": {
      "patterns": [
        {
          "include": "#-opt TypeExpression Name                               # property"
        }
      ]
    },
    "PropertyModifier": {
      "patterns": [
        {
          "match": "static"
        }
      ]
    },
    "PropertyAccessModifier": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "PropertyDeclarationFinish": {
      "patterns": [
        {
          "match": ";"
        }
      ]
    },
    "PropertyDeclarationInitialValue": {
      "patterns": [
        {
          "match": "=\\ Expression\\ ;"
        }
      ]
    },
    "MethodModifiers": {
      "patterns": [
        {
          "include": "#-opt TypeParameterList-opt MethodIdentity ParameterList  # method"
        }
      ]
    },
    "MethodModifier": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "MethodIdentity": {
      "patterns": [
        {
          "match": "construct\\ conditional\\-opt\\ ReturnList\\ Name\\ RedundantReturnSpecifier\\-opt"
        }
      ]
    },
    "ReturnList": {
      "patterns": [
        {
          "match": "void"
        }
      ]
    },
    "SingleReturnList": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "MultiReturnList": {
      "patterns": [
        {
          "match": ",\\ MultiReturn"
        }
      ]
    },
    "MultiReturn": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "RedundantReturnSpecifier": {
      "patterns": [
        {
          "match": "<\\ TypeExpressionList\\ >"
        }
      ]
    },
    "MethodDeclarationFinish": {
      "patterns": [
        {
          "match": ";\\ =\\ Expression\\ ;"
        }
      ]
    },
    "StatementBlock": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Statement": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "VariableDeclaration": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Assignment": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "LabeledStatement": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "AssertStatement": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "BreakStatement": {
      "patterns": [
        {
          "match": ":\\ break\\ Name\\-opt\\ ;"
        }
      ]
    },
    "ContinueStatement": {
      "patterns": [
        {
          "match": ":\\ continue\\ Name\\-opt\\ ;"
        }
      ]
    },
    "DoStatement": {
      "patterns": [
        {
          "match": "do\\ StatementBlock\\ while\\ \\(\\ ConditionList\\ \\)\\ ;"
        }
      ]
    },
    "ForStatement": {
      "patterns": [
        {
          "match": "for\\ \\(\\ ForCondition\\ \\)\\ StatementBlock"
        }
      ]
    },
    "IfStatement": {
      "patterns": [
        {
          "match": "if\\ \\(\\ ConditionList\\ \\)\\ StatementBlock\\ ElseStatement\\-opt"
        }
      ]
    },
    "ReturnStatement": {
      "patterns": [
        {
          "match": "return\\ ReturnValue\\-opt\\ ;"
        }
      ]
    },
    "SwitchStatement": {
      "patterns": [
        {
          "match": "switch\\ \\(\\ SwitchCondition\\ \\)\\ \\{\\ SwitchBlocks\\ \\}"
        }
      ]
    },
    "TryStatement": {
      "patterns": [
        {
          "match": "try\\ TryResources\\-opt\\ StatementBlock\\ TryFinish"
        }
      ]
    },
    "TypeDefStatement": {
      "patterns": [
        {
          "match": "typedef\\ AnyTypeExpression\\ as\\ Name\\ ;"
        }
      ]
    },
    "UsingStatement": {
      "patterns": [
        {
          "match": "using\\ \\(\\ UsingResources\\ \\)\\ StatementBlock"
        }
      ]
    },
    "WhileStatement": {
      "patterns": [
        {
          "match": "while\\ \\(\\ ConditionList\\ \\)\\ StatementBlock"
        }
      ]
    },
    "Statements": {
      "patterns": [
        {
          "include": "#Statement"
        }
      ]
    },
    "VariableTypeExpression": {
      "patterns": [
        {
          "match": "val\\ var"
        }
      ]
    },
    "VariableInitializerFinish": {
      "patterns": [
        {
          "match": "=\\ Expression"
        }
      ]
    },
    "OptionalDeclarationList": {
      "patterns": [
        {
          "match": ",\\ OptionalDeclaration"
        }
      ]
    },
    "OptionalDeclaration": {
      "patterns": [
        {
          "match": "=\\ Expression\\ \\(\\ OptionalDeclarationList\\ ,\\ OptionalDeclaration\\ \\)\\ =\\ Expression"
        }
      ]
    },
    "Assignable": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Assignee": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "AssignableList": {
      "patterns": [
        {
          "match": ",\\ Assignable"
        }
      ]
    },
    "TernaryExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "AssignmentOperator": {
      "patterns": [
        {
          "match": "=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ straight\\ assignment\\ \\*=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ multiply\\-assign\\ /=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ divide\\-assign\\ %=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ modulo\\-assign\\ \\+=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ add\\-assign\\ \\-=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ subtract\\-assign\\ <<=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ shift\\-left\\-assign\\ >>=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ shift\\-right\\-assign\\ >>>=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ unsigned\\-shift\\-right\\-assign\\ \\&=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ and\\-assign\\ \\&\\&=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ and\\-assign\\ \\(short\\-circuiting\\)"
        },
        {
          "match": "=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ or\\-assign"
        },
        {
          "include": "#"
        },
        {
          "match": "=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ or\\-assign\\ \\(short\\-circuiting\\)\\ \\^=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ xor\\-assign\\ \\?:=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ elvis\\-assign\\ \\(assigns\\ only\\ if\\ the\\ LVal\\ is\\ null\\)\\ :=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ conditional\\ assign\\ \\(RVal\\ must\\ be\\ @Conditional;\\ assigns\\ starting\\ with\\ 2nd\\ tuple\\ field\\ iff\\ expression\\ is\\ true\\)\\ \\?=\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ //\\ assigns\\ only\\ if\\ the\\ RVal\\ is\\ not\\ null\\ \\(also\\ used\\ in\\ conditional\\ statements\\ e\\.g\\.\\ if\\ to\\ produce\\ conditional\\ False\\ for\\ Null\\)"
        }
      ]
    },
    "AssertInstruction": {
      "patterns": [
        {
          "match": "\\#\\ \\(when\\ active,\\ what\\ gets\\ thrown\\)\\ assert\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ runtime,\\ IllegalState\\ assert:arg\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ runtime,\\ IllegalArgument\\ assert:bounds\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ runtime,\\ OutOfBounds\\ assert:TODO\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ runtime,\\ NotImplemented\\ assert:once\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ runtime,\\ Assertion\\ \\(only\\ tested\\ the\\ first\\ time\\)\\ assert:rnd\\(\\ Expression\\ \\)\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ runtime\\ \\(sampling\\),\\ IllegalState\\ assert:test\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ test\\ mode\\ \\(e\\.g\\.\\ CI/QC\\),\\ Assertion\\ assert:debug\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ debug\\ mode,\\ breakpoint\\-only\\ \\(i\\.e\\.\\ no\\ throw\\)"
        }
      ]
    },
    "AssertMessage": {
      "patterns": [
        {
          "match": "as\\ Expression"
        }
      ]
    },
    "ForCondition": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "VariableInitializationList": {
      "patterns": [
        {
          "match": ",\\ VariableInitializer"
        }
      ]
    },
    "VariableInitializer": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "VariableModificationList": {
      "patterns": [
        {
          "match": ",\\ VariableModification"
        }
      ]
    },
    "VariableModification": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ElseStatement": {
      "patterns": [
        {
          "match": "else\\ IfStatement\\ else\\ StatementBlock"
        }
      ]
    },
    "ConditionList": {
      "patterns": [
        {
          "match": ",\\ Condition"
        }
      ]
    },
    "Condition": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ConditionalAssignmentCondition": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ConditionalAssignmentOp": {
      "patterns": [
        {
          "match": ":=\\ \\?="
        }
      ]
    },
    "ImportFinish": {
      "patterns": [
        {
          "match": ";\\ as\\ Name\\ ;"
        }
      ]
    },
    "NoWhitespace": {
      "patterns": [
        {
          "match": "!"
        }
      ]
    },
    "ReturnValue": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "TupleLiteral": {
      "patterns": [
        {
          "match": "\\(\\ ExpressionList\\ ,\\ Expression\\ \\)\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ compile/runtime\\ type\\ is\\ Tuple"
        }
      ]
    },
    "ExpressionList": {
      "patterns": [
        {
          "match": ",\\ Expression"
        }
      ]
    },
    "SwitchCondition": {
      "patterns": [
        {
          "match": ",\\ SwitchConditionExpression"
        }
      ]
    },
    "SwitchConditionExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "SwitchBlocks": {
      "patterns": [
        {
          "include": "#SwitchBlock"
        }
      ]
    },
    "SwitchBlock": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "SwitchLabels": {
      "patterns": [
        {
          "match": "ExpressionList\\ ;"
        }
      ]
    },
    "SwitchLabel": {
      "patterns": [
        {
          "match": "case\\ CaseOptionList\\ :\\ default\\ :"
        }
      ]
    },
    "SwitchBlockFinish": {
      "patterns": [
        {
          "include": "#:"
        }
      ]
    },
    "CaseOptionList": {
      "patterns": [
        {
          "match": ",\\ CaseOption"
        }
      ]
    },
    "CaseOption": {
      "patterns": [
        {
          "match": ":\\ \\(\\ CaseExpressionList\\ ,\\ CaseExpression\\ \\)"
        }
      ]
    },
    "SafeCaseExpression": {
      "patterns": [
        {
          "match": ":\\ _"
        }
      ]
    },
    "CaseExpressionList": {
      "patterns": [
        {
          "match": ",\\ CaseExpression"
        }
      ]
    },
    "CaseExpression": {
      "patterns": [
        {
          "match": ":\\ _"
        }
      ]
    },
    "TryResources": {
      "patterns": [
        {
          "match": "\\(\\ VariableInitializationList\\ \\)"
        }
      ]
    },
    "TryFinish": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Catches": {
      "patterns": [
        {
          "include": "#Catch"
        }
      ]
    },
    "Catch": {
      "patterns": [
        {
          "match": "catch\\ \\(\\ TypeExpression\\ Name\\ \\)\\ StatementBlock"
        }
      ]
    },
    "UsingResources": {
      "patterns": [
        {
          "match": ",\\ UsingResource"
        }
      ]
    },
    "UsingResource": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "ElseExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "OrExpression": {
      "patterns": [
        {
          "match": "\\^\\^\\ AndExpression"
        }
      ]
    },
    "AndExpression": {
      "patterns": [
        {
          "match": "\\&\\&\\ EqualityExpression"
        }
      ]
    },
    "EqualityExpression": {
      "patterns": [
        {
          "match": "!=\\ RelationalExpression"
        }
      ]
    },
    "RelationalExpression": {
      "patterns": [
        {
          "match": ">=\\ \\ AssignmentExpression"
        }
      ]
    },
    "AssignmentExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "RangeExpression": {
      "patterns": [
        {
          "match": "\\.\\.\\ BitwiseExpression"
        }
      ]
    },
    "BitwiseExpression": {
      "patterns": [
        {
          "match": ""
        },
        {
          "match": "AdditiveExpression"
        }
      ]
    },
    "AdditiveExpression": {
      "patterns": [
        {
          "match": "\\-\\ MultiplicativeExpression"
        }
      ]
    },
    "MultiplicativeExpression": {
      "patterns": [
        {
          "match": "/%\\ ElvisExpression"
        }
      ]
    },
    "ElvisExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "PrefixExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "PostfixExpression": {
      "patterns": [
        {
          "match": "\\.is\\ \\(\\ AnyTypeExpression\\ \\)"
        }
      ]
    },
    "PrimaryExpression": {
      "patterns": [
        {
          "match": "\\(\\ Expression\\ \\)\\ new\\ NewFinish\\ \\&\\-opt\\ construct\\-opt\\ QualifiedName\\ TypeParameterTypeList\\-opt"
        }
      ]
    },
    "ArrayDims": {
      "patterns": [
        {
          "match": "\\[\\ DimIndicators\\-opt\\ \\]"
        }
      ]
    },
    "DimIndicators": {
      "patterns": [
        {
          "match": ",\\ DimIndicator"
        }
      ]
    },
    "DimIndicator": {
      "patterns": [
        {
          "match": "\\?"
        }
      ]
    },
    "ArrayIndexes": {
      "patterns": [
        {
          "include": "#ArgumentList-opt"
        }
      ]
    },
    "DotNameFinish": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "NewFinish": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "NewArguments": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "StatementExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "SwitchExpression": {
      "patterns": [
        {
          "match": "switch\\ \\(\\ SwitchCondition\\-opt\\ \\)\\ \\{\\ SwitchExpressionBlocks\\ \\}"
        }
      ]
    },
    "LambdaExpression": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Literal": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "AnonClassBody": {
      "patterns": [
        {
          "match": "\\{\\ TypeCompositionComponents\\ \\}"
        }
      ]
    },
    "SwitchExpressionBlocks": {
      "patterns": [
        {
          "include": "#SwitchExpressionBlock"
        }
      ]
    },
    "SwitchExpressionBlock": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "LambdaInputs": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "LambdaParameterName": {
      "patterns": [
        {
          "match": "_"
        }
      ]
    },
    "LambdaInferredList": {
      "patterns": [
        {
          "match": "\\(\\ LambdaParameterNames\\ \\)"
        }
      ]
    },
    "LambdaParameterList": {
      "patterns": [
        {
          "match": "\\(\\ LambdaParameters\\ \\)"
        }
      ]
    },
    "LambdaParameterNames": {
      "patterns": [
        {
          "match": ",\\ LambdaParameterName"
        }
      ]
    },
    "LambdaParameters": {
      "patterns": [
        {
          "match": ",\\ LambdaParameter"
        }
      ]
    },
    "LambdaParameter": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "LambdaBody": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "TodoFinish": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "InputCharacter": {
      "patterns": [
        {
          "include": "#except LineTerminator"
        }
      ]
    },
    "TypedNumericLiteral": {
      "patterns": [
        {
          "include": "#:"
        }
      ]
    },
    "IntLiteral": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "FPDecimalLiteral": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "FPBinaryLiteral": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "CharLiteral": {
      "patterns": [
        {
          "include": "## defined in language spec"
        }
      ]
    },
    "StringLiteral": {
      "patterns": [
        {
          "match": "''\\ CharacterString\\-opt\\ ''\\ '\\$'\\ CharacterString\\-opt\\ ''\\ \\\\"
        },
        {
          "match": "FreeformLiteral\\ \\$"
        },
        {
          "match": "FreeformLiteral\\ \\$\\ NoWhitespace\\ File\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ value\\ is\\ String\\ contents\\ of\\ file"
        }
      ]
    },
    "BinaryLiteral": {
      "patterns": [
        {
          "match": "\\#\\ NoWhitespace\\ Hexits\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ Hexits\\ defined\\ in\\ language\\ spec\\ \\#"
        },
        {
          "match": "FreeformLiteral\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ containing\\ only\\ Hexits\\ and\\ whitespace\\ \\#\\ NoWhitespace\\ File\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ file\\ to\\ include\\ as\\ binary\\ data"
        }
      ]
    },
    "ListLiteral": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "MapLiteral": {
      "patterns": [
        {
          "match": "\\[\\ Entries\\-opt\\ \\]\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ compile/runtime\\ type\\ is\\ Map"
        }
      ]
    },
    "DateLiteral": {
      "patterns": [
        {
          "match": "Date:\\ Digit\\ Digit\\ Digit\\ Digit\\ \\-\\ Digit\\ Digit\\ \\-\\ Digit\\ Digit\\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ NoWhitespace"
        }
      ]
    },
    "TimeOfDayLiteral": {
      "patterns": [
        {
          "match": "TimeOfDay:\\ Digit\\ Digit\\ :\\ Digit\\ Digit\\ Seconds\\-opt\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ NoWhitespace"
        }
      ]
    },
    "TimeLiteral": {
      "patterns": [
        {
          "match": "Time:\\ Digit\\ Digit\\ Digit\\ Digit\\ \\-\\ Digit\\ Digit\\ \\-\\ Digit\\ Digit\\ T\\ Digit\\ Digit\\ :\\ Digit\\ Digit\\ Seconds\\-opt\\ TimeZone\\-opt"
        }
      ]
    },
    "TimeZoneLiteral": {
      "patterns": [
        {
          "match": "TimeZone:\\ NoWhitespace\\ TimeZone"
        }
      ]
    },
    "DurationLiteral": {
      "patterns": [
        {
          "match": "Duration:P\\ YearsDuration\\-opt\\ MonthsDuration\\-opt\\ DaysDuration\\-opt\\ TimeDuration\\-opt"
        }
      ]
    },
    "PathLiteral": {
      "patterns": [
        {
          "match": "Path:\\ NoWhitespace\\ Dir\\ NoWhitespace\\ PathName\\-opt"
        }
      ]
    },
    "FileLiteral": {
      "patterns": [
        {
          "match": "File:\\-opt\\ NoWhitespace\\ File"
        }
      ]
    },
    "DirectoryLiteral": {
      "patterns": [
        {
          "match": "Directory:\\-opt\\ NoWhitespace\\ Dir"
        }
      ]
    },
    "FileStoreLiteral": {
      "patterns": [
        {
          "match": "FileStore:\\ NoWhitespace\\ Dir\\ NoWhitespace\\ PathName\\-opt"
        }
      ]
    },
    "IntTypeName": {
      "patterns": [
        {
          "match": ":\\ Int\\ Int8\\ Int16\\ Int32\\ Int64\\ Int128\\ IntN\\ Byte\\ UInt\\ UInt8\\ UInt16\\ UInt32\\ UInt64\\ UInt128\\ UIntN"
        }
      ]
    },
    "FPTypeName": {
      "patterns": [
        {
          "match": ":\\ Dec\\ Dec32\\ Dec64\\ Dec128\\ DecN\\ Float8e4\\ Float8e5\\ BFloat16\\ Float16\\ Float32\\ Float64\\ Float128\\ FloatN"
        }
      ]
    },
    "FPLiteral": {
      "patterns": [
        {
          "include": "#:"
        }
      ]
    },
    "FreeformLiteral": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "FreeformChars": {
      "patterns": [
        {
          "include": "#FreeformChar"
        }
      ]
    },
    "FreeformLines": {
      "patterns": [
        {
          "include": "#FreeformLine"
        }
      ]
    },
    "FreeformLine": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Whitespace": {
      "patterns": [
        {
          "match": "\\-opt"
        },
        {
          "match": "FreeformChars\\ LineTerminator"
        }
      ]
    },
    "FreeformChar": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "CollectionLiteral": {
      "patterns": [
        {
          "match": "\\[\\ ExpressionList\\-opt\\ \\]\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ compile/runtime\\ type\\ is\\ Array"
        }
      ]
    },
    "Entries": {
      "patterns": [
        {
          "match": ",\\ Entry"
        }
      ]
    },
    "Entry": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "VersionString": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "NonGASuffix": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "VersionNumbers": {
      "patterns": [
        {
          "match": "NoWhitespace\\ \\.\\ NoWhitespace\\ DigitsNoUnderscores"
        }
      ]
    },
    "DigitsNoUnderscores": {
      "patterns": [
        {
          "match": "NoWhitespace\\ S"
        }
      ]
    },
    "VersionFinish": {
      "patterns": [
        {
          "match": ":\\ \\-\\ NoWhitespace\\ NonGASuffix\\ \\.\\ NoWhitespace\\ NonGASuffix"
        }
      ]
    },
    "NonGAPrefix": {
      "patterns": [
        {
          "match": ":\\ \\ \\ \\ \\ \\ \\ \\ \\#\\ note:\\ not\\ \\(!!!\\)\\ case\\ sensitive\\ dev\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ developer\\ build\\ \\(default\\ compiler\\ stamp\\)\\ ci\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ continuous\\ integration\\ build\\ \\(automated\\ build,\\ automated\\ test\\)\\ qc\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ build\\ selected\\ for\\ internal\\ Quality\\ Control\\ alpha\\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ build\\ selected\\ for\\ external\\ alpha\\ test\\ \\(pre\\-release\\)\\ beta\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ build\\ selected\\ for\\ external\\ beta\\ test\\ \\(pre\\-release\\)\\ rc\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ build\\ selected\\ as\\ a\\ release\\ candidate\\ \\(pre\\-release;\\ GA\\ pending\\)"
        }
      ]
    },
    "NonGAVersion": {
      "patterns": [
        {
          "match": "\\-\\ NoWhitespace\\ DigitsNoUnderscores\\ \\.\\ NoWhitespace\\ DigitsNoUnderscores"
        }
      ]
    },
    "Build": {
      "patterns": [
        {
          "match": "\\+\\ NoWhitespace\\ BuildChars"
        }
      ]
    },
    "BuildChars": {
      "patterns": [
        {
          "include": "#BuildChar"
        }
      ]
    },
    "BuildChar": {
      "patterns": [
        {
          "match": "0\\.\\.9\\ A\\.\\.Z\\ a\\.\\.z\\ \\-\\ \\."
        }
      ]
    },
    "Seconds": {
      "patterns": [
        {
          "match": ":\\ Digit\\ Digit\\ SecondsFraction\\-opt\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ NoWhitespace"
        }
      ]
    },
    "SecondsFraction": {
      "patterns": [
        {
          "match": "\\.\\ NoWhitespace\\ Digits"
        }
      ]
    },
    "TimeZone": {
      "patterns": [
        {
          "match": "Z\\ \\+\\ NoWhitespace\\ Digit\\ NoWhitespace\\ Digit\\ NoWhitespace\\ MinutesOffset\\-opt\\ \\-\\ NoWhitespace\\ Digit\\ NoWhitespace\\ Digit\\ NoWhitespace\\ MinutesOffset\\-opt"
        }
      ]
    },
    "MinutesOffset": {
      "patterns": [
        {
          "match": ":\\ NoWhitespace\\ Digit\\ NoWhitespace\\ Digit"
        }
      ]
    },
    "TimeDuration": {
      "patterns": [
        {
          "match": "T\\ NoWhitespace\\ HoursDuration\\-opt\\ NoWhitespace\\ MinutesDuration\\-opt\\ NoWhitespace\\ SecondsDuration\\-opt"
        }
      ]
    },
    "YearsDuration": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "MonthsDuration": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "DaysDuration": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "HoursDuration": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "MinutesDuration": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "SecondsDuration": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "File": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "Dir": {
      "patterns": [
        {
          "match": "/\\ NoWhitespace\\ DirElements\\-opt\\ \\./\\ NoWhitespace\\ DirElements\\-opt\\ \\.\\./\\ NoWhitespace\\ DirElements\\-opt"
        }
      ]
    },
    "DirElements": {
      "patterns": [
        {
          "include": "#NoWhitespace DirElement"
        }
      ]
    },
    "DirElement": {
      "patterns": [
        {
          "match": "\\.\\./"
        }
      ]
    },
    "PathName": {
      "patterns": [
        {
          "match": "\\.\\-opt\\ NoWhitespace\\ PathNameParts\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ allows\\ UNIX\\-style\\ hidden\\ files,\\ e\\.g\\.\\ \\.gitignore"
        }
      ]
    },
    "PathNameParts": {
      "patterns": [
        {
          "include": "#NoWhitespace PathNameSpecial NoWhitespace PathNamePart"
        }
      ]
    },
    "PathNamePart": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "IdentifierTrails": {
      "patterns": [
        {
          "include": "#IdentifierTrail"
        }
      ]
    },
    "PathNameSpecial": {
      "patterns": [
        {
          "match": "\\.\\ \\-"
        }
      ]
    },
    "IdentifierTrail": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "IntersectingTypeExpression": {
      "patterns": [
        {
          "match": "\\-\\ UnionedTypeExpression"
        }
      ]
    },
    "ExtendedIntersectingTypeExpression": {
      "patterns": [
        {
          "match": "\\-\\ ExtendedUnionedTypeExpression"
        }
      ]
    },
    "UnionedTypeExpression": {
      "patterns": [
        {
          "match": ""
        },
        {
          "match": "PrefixTypeExpression"
        }
      ]
    },
    "ExtendedUnionedTypeExpression": {
      "patterns": [
        {
          "match": ""
        },
        {
          "match": "ExtendedPrefixTypeExpression"
        }
      ]
    },
    "PrefixTypeExpression": {
      "patterns": [
        {
          "match": "immutable\\-opt\\ Annotations\\-opt\\ PostfixTypeExpression"
        }
      ]
    },
    "ExtendedPrefixTypeExpression": {
      "patterns": [
        {
          "match": "immutable\\-opt\\ TypeAccessModifier\\-opt\\ Annotations\\-opt\\ ExtendedPostfixTypeExpression"
        }
      ]
    },
    "TypeAccessModifier": {
      "patterns": [
        {
          "match": "struct"
        }
      ]
    },
    "PostfixTypeExpression": {
      "patterns": [
        {
          "include": "#ArrayIndexes           # ArrayIndexes is not consumed by this construction"
        }
      ]
    },
    "PrimaryTypeExpression": {
      "patterns": [
        {
          "match": "\\(\\ ExtendedTypeExpression\\ \\)"
        }
      ]
    },
    "ExtendedPostfixTypeExpression": {
      "patterns": [
        {
          "include": "#ArrayIndexes   # ArrayIndexes is not consumed by this construction"
        }
      ]
    },
    "ExtendedPrimaryTypeExpression": {
      "patterns": [
        {
          "match": "\\(\\ ExtendedTypeExpression\\ \\)"
        }
      ]
    },
    "NamedTypeExpression": {
      "patterns": [
        {
          "match": "\\.\\ Annotations\\-opt\\ NamedTypeExpressionPart"
        }
      ]
    },
    "FunctionTypeExpression": {
      "patterns": [
        {
          "match": "function\\ conditional\\-opt\\ ReturnList\\ Name\\-opt\\ \\(\\ TypeExpressionList\\-opt\\ \\)"
        }
      ]
    },
    "AnonTypeExpression": {
      "patterns": [
        {
          "match": "\\{\\ NameOrSignatureList\\ ;\\ \\}\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\#\\ note:\\ at\\ least\\ one\\ name\\ or\\ signature\\ is\\ required"
        }
      ]
    },
    "NamedTypeExpressionPart": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "NoAutoNarrowModifier": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "TypeValueSet": {
      "patterns": [
        {
          "match": "\\{\\ TypeValueList\\ \\}"
        }
      ]
    },
    "TypeValueList": {
      "patterns": [
        {
          "match": ",\\ TypeValue"
        }
      ]
    },
    "TypeValue": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    },
    "NameOrSignatureList": {
      "patterns": [
        {
          "match": ";\\ NameOrSignature"
        }
      ]
    },
    "NameOrSignature": {
      "patterns": [
        {
          "include": "#"
        }
      ]
    }
  },
  "uuid": "6f935474-6b2a-4501-b95b-c24ee3d9974e",
  "version": "1.0.0"
}
