<AccessModifier> ::= "public" | "protected" | "private"
<AdditiveExpression> ::= <MultiplicativeExpression> <AdditiveExpressionRest>
<AdditiveExpressionRest> ::= "+" <MultiplicativeExpression> | "-" <MultiplicativeExpression> <AdditiveExpressionRest> | ε
<AndExpression> ::= <EqualityExpression> <AndExpressionRest>
<AndExpressionRest> ::= "&&" <EqualityExpression> <AndExpressionRest> | ε
<Annotation> ::= "@" <NoWhitespace> <NamedTypeExpression> <NoWhitespace> [<ArgumentList>]
<Annotations> ::= <Annotation> <AnnotationsRest>
<AnnotationsRest> ::= <Annotation> <AnnotationsRest> | ε
<AnonClassBody> ::= "{" <TypeCompositionComponents> "}"
<AnonTypeExpression> ::= "{" <NameOrSignatureList> ";" "}"
<AnyTypeExpression> ::= <ExtendedTypeExpression>
<Argument> ::= [<NamedArgument>] <ArgumentExpression>
<ArgumentExpression> ::= "_" | "<" <ExtendedTypeExpression> ">" "_" | <Expression>
<ArgumentList> ::= "(" [<Arguments>] ")"
<Arguments> ::= <Argument> <ArgumentsRest>
<ArgumentsRest> ::= "," <Argument> <ArgumentsRest> | ε
<ArrayDims> ::= "[" [<DimIndicators>] "]"
<ArrayIndexes> ::= "[" <ExpressionList> "]"
<AssertInstruction> ::= "assert" | "assert:arg" | "assert:bounds" | "assert:TODO" | "assert:once" | "assert:rnd(" <Expression> ")" | "assert:test" | "assert:debug"
<AssertMessage> ::= "as" <Expression>
<AssertStatement> ::= <AssertInstruction> [<ConditionList>] [<AssertMessage>] ";"
<Assignable> ::= <Name> | <TernaryExpression> "." <Name> | <TernaryExpression> <ArrayIndexes>
<AssignableList> ::= <Assignable> <AssignableListRest>
<AssignableListRest> ::= "," <Assignable> <AssignableListRest> | ε
<Assignee> ::= <Assignable> | "(" <AssignableList> "," <Assignable> ")"
<Assignment> ::= <Assignee> <AssignmentOperator> <Expression>
<AssignmentExpression> ::= <RangeExpression> | <RangeExpression> "<-" <AssignmentExpression>
<AssignmentOperator> ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "&&=" | "|=" | "||=" | "^=" | "?:=" | ":=" | "?="
<BinaryExponentIndicator> ::= "P" | "p"
<BinaryIndicator> ::= "B" | "b"
<BinaryLiteral> ::= "#" <NoWhitespace> <Hexits> | "#|" <FreeformLiteral> | "#" <NoWhitespace> <File>
<Bit> ::= "0" | "1"
<BitLiteral> ::= "0" <BinaryIndicator> <Bits>
<BitOrUnderscore> ::= <Bit> | "_"
<Bits> ::= <Bit> [<BitsOrUnderscores>]
<BitsOrUnderscores> ::= <BitOrUnderscore> <BitsOrUnderscoresRest>
<BitsOrUnderscoresRest> ::= <BitOrUnderscore> <BitsOrUnderscoresRest> | ε
<BitwiseExpression> ::= <AdditiveExpression> <BitwiseExpressionRest>
<BitwiseExpressionRest> ::= "<<"  <AdditiveExpression> | ">>"  <AdditiveExpression> | ">>>" <AdditiveExpression> | "&"   <AdditiveExpression> | "^"   <AdditiveExpression> | "|"   <AdditiveExpression> <BitwiseExpressionRest> | ε
<BreakStatement> ::= "break" [<Name>] ";"
<Build> ::= "+" <NoWhitespace> <BuildChars>
<BuildChar> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "-" | "."
<BuildChars> ::= <BuildChar> <BuildCharsRest>
<BuildCharsRest> ::= <BuildChar> <BuildCharsRest> | ε
<CaseExpression> ::= "_" | <Expression>
<CaseExpressionList> ::= <CaseExpression> <CaseExpressionListRest>
<CaseExpressionListRest> ::= "," <CaseExpression> <CaseExpressionListRest> | ε
<CaseOption> ::= "(" <CaseExpressionList> "," <CaseExpression> ")" | <SafeCaseExpression>
<CaseOptionList> ::= <CaseOption> <CaseOptionListRest>
<CaseOptionListRest> ::= "," <CaseOption> <CaseOptionListRest> | ε
<Catch> ::= "catch" "(" <TypeExpression> <Name> ")" <StatementBlock>
<Catches> ::= <Catch> <CatchesRest>
<CatchesRest> ::= <Catch> <CatchesRest> | ε
<Category> ::= "module" | "package" | "class" | "interface" | "service" | "const" | "enum" | "mixin"
<CharLiteral> ::= "'" <SingleCharacter> "'"
<CharacterEscape> ::= "\\" | "\" | "\b" | "\f" | "\n" | "\r" | "\t"
<CharacterString> ::= <StringCharacter> <CharacterStringRest>
<CharacterStringRest> ::= <StringCharacter> <CharacterStringRest> | ε
<CollectionLiteral> ::= "[" [<ExpressionList>] "]" | <TypeExpression> <NoWhitespace> ":" "[" [<ExpressionList>] "]"
<CompilationUnit> ::= [<ImportStatements>] <TypeCompositionStatement>
<Composition> ::= "extends" <ExtendsList> | "implements" <ImplementsList> | "delegates" <DelegatesList> | "incorporates" <IncorporatesList> | "into" <AnyTypeExpression> | "import" [<ImportModifier>] <QualifiedName> [<VersionRequirement>] [<ResourceProvider>] | "default" "(" <Expression> ")"
<Compositions> ::= <ConditionalComposition> <CompositionsRest>
<CompositionsRest> ::= <ConditionalComposition> <CompositionsRest> | ε
<Condition> ::= "!" "(" <ConditionalAssignmentCondition> ")" | <Expression> <ConditionRest>
<ConditionRest> ::= alAssignmentCondition <ConditionRest> | ε
<ConditionList> ::= <Condition> <ConditionListRest>
<ConditionListRest> ::= "," <Condition> <ConditionListRest> | ε
<ConditionalAssignmentCondition> ::= <OptionalDeclaration> <ConditionalAssignmentOp> <Expression> | "(" <OptionalDeclarationList> "," <OptionalDeclaration> ")" <ConditionalAssignmentOp> <Expression>
<ConditionalAssignmentOp> ::= ":=" | "?="
<ConditionalComposition> ::= <IfComposition> | <Composition>
<ConditionalTypeCompositionComponent> ::= <IfTypeCompositionComponent> | <TypeCompositionComponent>
<ContinueStatement> ::= "continue" [<Name>] ";"
<DateLiteral> ::= "Date:" <Digit> <Digit> <Digit> <Digit> "-" <Digit> <Digit> "-" <Digit> <Digit>
<DaysDuration> ::= <DigitsNoUnderscores> <NoWhitespace> "D"
<DecimalExponentIndicator> ::= "E" | "e"
<DefaultValue> ::= "=" <Expression>
<DelegatesList> ::= <DelegatesSingle> <DelegatesListRest>
<DelegatesListRest> ::= "," <DelegatesSingle> <DelegatesListRest> | ε
<DelegatesSingle> ::= <AnyTypeExpression> "(" <Expression> ")"
<Digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<DigitLiteral> ::= <Digits>
<DigitOrUnderscore> ::= <Digit> | "_"
<Digits> ::= <Digit> | <Digit> [<DigitsOrUnderscores>] <DigitsRest>
<DigitsRest> ::= <Digit> <DigitsRest> | ε
<DigitsNoUnderscores> ::= <Digits>
<DigitsOrUnderscores> ::= <DigitOrUnderscore> <DigitsOrUnderscoresRest>
<DigitsOrUnderscoresRest> ::= <DigitOrUnderscore> <DigitsOrUnderscoresRest> | ε
<DimIndicator> ::= "?"
<DimIndicators> ::= <DimIndicator> <DimIndicatorsRest>
<DimIndicatorsRest> ::= "," <DimIndicator> <DimIndicatorsRest> | ε
<Dir> ::= "/" <NoWhitespace> [<DirElements>] | "./" <NoWhitespace> [<DirElements>] | "../" <NoWhitespace> [<DirElements>]
<DirElement> ::= "../" | <PathName> <NoWhitespace> "/"
<DirElements> ::= <DirElement> <DirElementsRest>
<DirElementsRest> ::= <NoWhitespace> <DirElement> <DirElementsRest> | ε
<DirectoryLiteral> ::= ["Directory:"] <NoWhitespace> <Dir>
<DoStatement> ::= "do" <StatementBlock> "while" "(" <ConditionList> ")" ";"
<DotNameFinish> ::= <Name> [<TypeParameterTypeList>] | "default"
<DurationLiteral> ::= "Duration:P" [<YearsDuration>] [<MonthsDuration>] [<DaysDuration>] [<TimeDuration>]
<ElseComposition> ::= "else" <IfComposition> | "else" "{" <Compositions> "}"
<ElseExpression> ::= <TernaryExpression> | <TernaryExpression> ":" <ElseExpression>
<ElseStatement> ::= "else" <IfStatement> | "else" <StatementBlock>
<ElseTypeCompositionComponent> ::= "else" <IfTypeCompositionComponent> | "else" "{" <TypeCompositionComponents> "}"
<ElvisExpression> ::= <PrefixExpression> | <PrefixExpression> "?:" <ElvisExpression>
<Entries> ::= <Entry> <EntriesRest>
<EntriesRest> ::= "," <Entry> <EntriesRest> | ε
<Entry> ::= <Expression> "=" <Expression>
<Enum> ::= [<Annotations>] <Name> [<TypeParameterTypeList>] [<ArgumentList>] [<TypeCompositionBody>]
<EnumBody> ::= <Enums> [<EnumBodyFinish>]
<EnumBodyFinish> ::= ";" <TypeCompositionComponents>
<Enums> ::= <Enum> <EnumsRest>
<EnumsRest> ::= "," <Enum> <EnumsRest> | ε
<EqualityExpression> ::= <RelationalExpression> <EqualityExpressionRest>
<EqualityExpressionRest> ::= "==" <RelationalExpression> | "!=" <RelationalExpression> <EqualityExpressionRest> | ε
<Exponent> ::= ε <ExponentRest>
<ExponentRest> ::= <Indicator> <IntegerLiteral> <ExponentRest> | ε
<ExponentIndicator> ::= <DecimalExponentIndicator> | <BinaryExponentIndicator>
<Expression> ::= <ElseExpression>
<ExpressionList> ::= <Expression> <ExpressionListRest>
<ExpressionListRest> ::= "," <Expression> <ExpressionListRest> | ε
<ExtendedIntersectingTypeExpression> ::= <ExtendedUnionedTypeExpression> <ExtendedIntersectingTypeExpressionRest>
<ExtendedIntersectingTypeExpressionRest> ::= "+" <ExtendedUnionedTypeExpression> | "-" <ExtendedUnionedTypeExpression> <ExtendedIntersectingTypeExpressionRest> | ε
<ExtendedPostfixTypeExpression> ::= <ExtendedPrimaryTypeExpression> <ExtendedPostfixTypeExpressionRest>
<ExtendedPostfixTypeExpressionRest> ::= <NoWhitespace> "?" | <ArrayDims> | <ArrayIndexes> <ExtendedPostfixTypeExpressionRest> | ε
<ExtendedPrefixTypeExpression> ::= ["immutable"] [<TypeAccessModifier>] [<Annotations>] <ExtendedPostfixTypeExpression>
<ExtendedPrimaryTypeExpression> ::= "(" <ExtendedTypeExpression> ")" | <NamedTypeExpression> | <FunctionTypeExpression> | <AnonTypeExpression> | "const" | "enum" | "module" | "package" | "service" | "class"
<ExtendedTypeExpression> ::= <ExtendedIntersectingTypeExpression>
<ExtendedUnionedTypeExpression> ::= <ExtendedPrefixTypeExpression> <ExtendedUnionedTypeExpressionRest>
<ExtendedUnionedTypeExpressionRest> ::= "|" <ExtendedPrefixTypeExpression> <ExtendedUnionedTypeExpressionRest> | ε
<ExtendsList> ::= <ExtendsSingle> <ExtendsListRest>
<ExtendsListRest> ::= "," <ExtendsSingle> <ExtendsListRest> | ε
<ExtendsSingle> ::= <TypeExpression> [<ArgumentList>]
<FPLiteral> ::= <IntegerLiteral> | FPDecimalLiteral | FPBinaryLiteral
<FPTypeName> ::= "Dec" | "Dec32" | "Dec64" | "Dec128" | "DecN" | "Float8e4" | "Float8e5" | "BFloat16" | "Float16" | "Float32" | "Float64" | "Float128" | "FloatN"
<File> ::= <Dir> <NoWhitespace> <PathName>
<FileLiteral> ::= ["<File>:"] <NoWhitespace> <File>
<FileStoreLiteral> ::= "FileStore:" <NoWhitespace> <Dir> <NoWhitespace> [<PathName>]
<FloatingPointLiteral> ::= <IntegerLiteral> <Exponent> | [<Sign>] <FractionalLiteral> [<Exponent>]
<ForCondition> ::= [<VariableInitializationList>] ";" [<ConditionList>] ";" [<VariableModificationList>] | <OptionalDeclaration> ":" <Expression> | "(" <OptionalDeclarationList> "," <OptionalDeclaration> ")" ":" <Expression>
<ForStatement> ::= "for" "(" <ForCondition> ")" <StatementBlock>
<FractionalLiteral> ::= "0" <BinaryIndicator> [<Bits>] "." <Bits> | "0" "o" [<Octals>] "." <Octals> | [<Digits>] "." <Digits> | "0" <HexIndicator> [<Hexits>] "." <Hexits>
<FreeformChar> ::= <InputCharacter> except <LineTerminator>
<FreeformChars> ::= <FreeformChar> <FreeformCharsRest>
<FreeformCharsRest> ::= <FreeformChar> <FreeformCharsRest> | ε
<FreeformLine> ::= [<Whitespace>] "|" <FreeformChars> <LineTerminator>
<FreeformLines> ::= <FreeformLine> <FreeformLinesRest>
<FreeformLinesRest> ::= <FreeformLine> <FreeformLinesRest> | ε
<FreeformLiteral> ::= <FreeformChars> <LineTerminator> [<FreeformLines>]
<FunctionTypeExpression> ::= "function" ["conditional"] <ReturnList> [<Name>] "(" [<TypeExpressionList>] ")"
<HexIndicator> ::= "X" | "x"
<Hexit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f"
<HexitLiteral> ::= "0" <HexIndicator> <Hexits>
<HexitOrUnderscore> ::= <Hexit> | "_"
<Hexits> ::= <Hexit> [<HexitsOrUnderscores>]
<HexitsOrUnderscores> ::= <HexitOrUnderscore> <HexitsOrUnderscoresRest>
<HexitsOrUnderscoresRest> ::= <HexitOrUnderscore> <HexitsOrUnderscoresRest> | ε
<HoursDuration> ::= <DigitsNoUnderscores> <NoWhitespace> "H"
<IdentifierTrail> ::= 
<IdentifierTrails> ::= <IdentifierTrail> <IdentifierTrailsRest>
<IdentifierTrailsRest> ::= <IdentifierTrail> <IdentifierTrailsRest> | ε
<IfComposition> ::= "if" "(" <Expression> ")" "{" <Compositions> "}" [<ElseComposition>]
<IfStatement> ::= "if" "(" <ConditionList> ")" <StatementBlock> [<ElseStatement>]
<IfTypeCompositionComponent> ::= "if" "(" <Expression> ")" "{" <TypeCompositionComponents> "}" [<ElseTypeCompositionComponent>]
<ImplementsList> ::= <ImplementsSingle> <ImplementsListRest>
<ImplementsListRest> ::= "," <ImplementsSingle> <ImplementsListRest> | ε
<ImplementsSingle> ::= <ExtendedTypeExpression>
<ImportFinish> ::= ";" | "as" <Name> ";" | <NoWhitespace> ".*" ";"
<ImportModifier> ::= "embedded" | "required" | "desired" | "optional"
<ImportStatement> ::= "import" <QualifiedName> <ImportFinish>
<ImportStatements> ::= <ImportStatement> <ImportStatementsRest>
<ImportStatementsRest> ::= <ImportStatement> <ImportStatementsRest> | ε
<IncorporatesList> ::= <IncorporatesSingle> <IncorporatesListRest>
<IncorporatesListRest> ::= "," <IncorporatesSingle> <IncorporatesListRest> | ε
<IncorporatesSingle> ::= "conditional" <QualifiedName> <TypeParameterList> [<ArgumentList>] | <TypeExpression> [<ArgumentList>]
<Indicator> ::= <BinaryIndicator> | <HexIndicator> | <OctalIndicator>
<InputCharacter> ::= <RawCharacter> except <LineTerminator>
<InputCharacters> ::= <InputCharacter> <InputCharactersRest>
<InputCharactersRest> ::= <InputCharacter> <InputCharactersRest> | ε
<IntTypeName> ::= "Int" | "Int8" | "Int16" | "Int32" | "Int64" | "Int128" | "IntN" | "Byte" | "UInt" | "UInt8" | "UInt16" | "UInt32" | "UInt64" | "UInt128" | "UIntN"
<IntegerLiteral> ::= [<Sign>] <UnsignedIntegerLiteral>
<IntersectingTypeExpression> ::= <UnionedTypeExpression> <IntersectingTypeExpressionRest>
<IntersectingTypeExpressionRest> ::= "+" <UnionedTypeExpression> | "-" <UnionedTypeExpression> <IntersectingTypeExpressionRest> | ε
<LabeledStatement> ::= <Name> ":" <Whitespace> <Statement>
<LambdaBody> ::= <Expression> | <StatementBlock>
<LambdaExpression> ::= <LambdaInputs> "->" <LambdaBody>
<LambdaInferredList> ::= "(" <LambdaParameterNames> ")"
<LambdaInputs> ::= <LambdaParameterName> | <LambdaInferredList> | <LambdaParameterList>
<LambdaParameter> ::= <TypeExpression> <LambdaParameterName>
<LambdaParameterList> ::= "(" <LambdaParameters> ")"
<LambdaParameterName> ::= "_" | <Name>
<LambdaParameterNames> ::= <LambdaParameterName> <LambdaParameterNamesRest>
<LambdaParameterNamesRest> ::= "," <LambdaParameterName> <LambdaParameterNamesRest> | ε
<LambdaParameters> ::= <LambdaParameter> <LambdaParametersRest>
<LambdaParametersRest> ::= "," <LambdaParameter> <LambdaParametersRest> | ε
<Letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<LineTerminator> ::= "\u000a" | "\u000b" | "\u000c" | "\u000d" ["\u000a"] | "\u0085" | "\u2028" | "\u2029"
<ListLiteral> ::= "[" "]" | "[" [<ExpressionList>] "]" | <TypeExpression> <NoWhitespace> ":" "[" [<ExpressionList>] "]"
<Literal> ::= <TypedNumericLiteral> | <IntegerLiteral> | FPDecimalLiteral | FPBinaryLiteral | <CharLiteral> | <StringLiteral> | <BinaryLiteral> | <TupleLiteral> | <ListLiteral> | <MapLiteral> | <VersionLiteral> | <DateLiteral> | <TimeOfDayLiteral> | <TimeLiteral> | <TimeZoneLiteral> | <DurationLiteral> | <PathLiteral> | <FileLiteral> | <DirectoryLiteral> | <FileStoreLiteral>
<MapLiteral> ::= "[" [<Entries>] "]" | <TypeExpression> <NoWhitespace> ":" "[" [<Entries>] "]"
<MethodDeclarationFinish> ::= ";" | "=" <Expression> ";" | <StatementBlock>
<MethodDeclarationStatement> ::= [<MethodModifiers>] [<TypeParameterList>] <MethodIdentity> <ParameterList> <MethodDeclarationFinish>
<MethodIdentity> ::= "construct" | ["conditional"] <ReturnList> <Name> [<RedundantReturnSpecifier>]
<MethodModifier> ::= <Modifier> | <Annotation>
<MethodModifiers> ::= <MethodModifier> <MethodModifiersRest>
<MethodModifiersRest> ::= <MethodModifier> <MethodModifiersRest> | ε
<MinutesDuration> ::= <DigitsNoUnderscores> <NoWhitespace> "M"
<MinutesOffset> ::= ":" <NoWhitespace> <Digit> <NoWhitespace> <Digit>
<Modifier> ::= "static" | <AccessModifier> | <Annotation>
<Modifiers> ::= <Modifier> <ModifiersRest>
<ModifiersRest> ::= <Modifier> <ModifiersRest> | ε
<MonthsDuration> ::= <DigitsNoUnderscores> <NoWhitespace> "M"
<MultiReturn> ::= <TypeExpression> [<Name>]
<MultiReturnList> ::= <MultiReturn> <MultiReturnListRest>
<MultiReturnListRest> ::= "," <MultiReturn> <MultiReturnListRest> | ε
<MultiplicativeExpression> ::= <ElvisExpression> <MultiplicativeExpressionRest>
<MultiplicativeExpressionRest> ::= "*"  <ElvisExpression> | "/"  <ElvisExpression> | "%"  <ElvisExpression> | "/%" <ElvisExpression> <MultiplicativeExpressionRest> | ε
<Name> ::= (<Letter> | "_") (<Letter> | <Digit> | "_")*
<NameOrSignature> ::= <Name> | [<PropertyModifiers>] <TypeExpression> <Name> | [<MethodModifiers>] [<TypeParameterList>] <MethodIdentity> <ParameterList>
<NameOrSignatureList> ::= <NameOrSignature> <NameOrSignatureListRest>
<NameOrSignatureListRest> ::= ";" <NameOrSignature> <NameOrSignatureListRest> | ε
<NamedArgument> ::= <Name> "="
<NamedTypeExpression> ::= ε <NamedTypeExpressionRest>
<NamedTypeExpressionRest> ::= Part | "." [<Annotations>] <NamedTypeExpressionPart> <NamedTypeExpressionRest> | ε
<NamedTypeExpressionPart> ::= <QualifiedName> [<NoAutoNarrowModifier>] [<TypeParameterTypeList>] [<TypeValueSet>]
<NewArguments> ::= <ArrayIndexes> [<ArgumentList>] | <ArgumentList>
<NewFinish> ::= <TypeExpression> <NewArguments> [<AnonClassBody>] | <ArgumentList>
<NoAutoNarrowModifier> ::= <NoWhitespace> "!"
<NoWhitespace> ::= "\\u0000" | "\\u0001" | "\\u0002" | "\\u0003" | "\\u0004" | "\\u0005" | "\\u0006" | "\\u0007" | "\\u0008" | "\\u000e" | "\\u000f" | "\\u0010" | "\\u0011" | "\\u0012" | "\\u0013" | "\\u0014" | "\\u0015" | "\\u0016" | "\\u0017" | "\\u0018" | "\\u0019" | "\\u001a" | "\\u001b" | "\\u0021" | "\\u0022" | "\\u0023" | "\\u0024" | "\\u0025" | "\\u0026" | "\\u0027" | "\\u0028" | "\\u0029" | "\\u002a" | "\\u002b" | "\\u002c" | "\\u002d" | "\\u002e" | "\\u002f" | "\\u0030" | "\\u0031" | "\\u0032" | "\\u0033" | "\\u0034" | "\\u0035" | "\\u0036" | "\\u0037" | "\\u0038" | "\\u0039" | "\\u003a" | "\\u003b" | "\\u003c" | "\\u003d" | "\\u003e" | "\\u003f" | "\\u0040" | "\\u0041" | "\\u0042" | "\\u0043" | "\\u0044" | "\\u0045" | "\\u0046" | "\\u0047" | "\\u0048" | "\\u0049" | "\\u004a" | "\\u004b" | "\\u004c" | "\\u004d" | "\\u004e" | "\\u004f" | "\\u0050" | "\\u0051" | "\\u0052" | "\\u0053" | "\\u0054" | "\\u0055" | "\\u0056" | "\\u0057" | "\\u0058" | "\\u0059" | "\\u005a" | "\\u005b" | "\\u005c" | "\\u005d" | "\\u005e" | "\\u005f" | "\\u0060" | "\\u0061" | "\\u0062" | "\\u0063" | "\\u0064" | "\\u0065" | "\\u0066" | "\\u0067" | "\\u0068" | "\\u0069" | "\\u006a" | "\\u006b" | "\\u006c" | "\\u006d" | "\\u006e" | "\\u006f" | "\\u0070" | "\\u0071" | "\\u0072" | "\\u0073" | "\\u0074" | "\\u0075" | "\\u0076" | "\\u0077" | "\\u0078" | "\\u0079" | "\\u007a" | "\\u007b" | "\\u007c" | "\\u007d" | "\\u007e" | "\\u007f" | "\\u0080" | "\\u0081" | "\\u0082" | "\\u0083" | "\\u0084" | "\\u0086" | "\\u0087" | "\\u0088" | "\\u0089" | "\\u008a" | "\\u008b" | "\\u008c" | "\\u008d" | "\\u008e" | "\\u008f" | "\\u0090" | "\\u0091" | "\\u0092" | "\\u0093" | "\\u0094" | "\\u0095" | "\\u0096" | "\\u0097" | "\\u0098" | "\\u0099" | "\\u009a" | "\\u009b" | "\\u009c" | "\\u009d" | "\\u009e" | "\\u009f" | "\\u00a1" | "\\u00a2" | "\\u00a3" | "\\u00a4" | "\\u00a5" | "\\u00a6" | "\\u00a7" | "\\u00a8" | "\\u00a9" | "\\u00aa" | "\\u00ab" | "\\u00ac" | "\\u00ad" | "\\u00ae" | "\\u00af" | "\\u00b0" | "\\u00b1" | "\\u00b2" | "\\u00b3" | "\\u00b4" | "\\u00b5" | "\\u00b6" | "\\u00b7" | "\\u00b8" | "\\u00b9" | "\\u00ba" | "\\u00bb" | "\\u00bc" | "\\u00bd" | "\\u00be" | "\\u00bf" | "\\u00c0" | "\\u00c1" | "\\u00c2" | "\\u00c3" | "\\u00c4" | "\\u00c5" | "\\u00c6" | "\\u00c7" | "\\u00c8" | "\\u00c9" | "\\u00ca" | "\\u00cb" | "\\u00cc" | "\\u00cd" | "\\u00ce" | "\\u00cf" | "\\u00d0" | "\\u00d1" | "\\u00d2" | "\\u00d3" | "\\u00d4" | "\\u00d5" | "\\u00d6" | "\\u00d7" | "\\u00d8" | "\\u00d9" | "\\u00da" | "\\u00db" | "\\u00dc" | "\\u00dd" | "\\u00de" | "\\u00df" | "\\u00e0" | "\\u00e1" | "\\u00e2" | "\\u00e3" | "\\u00e4" | "\\u00e5" | "\\u00e6" | "\\u00e7" | "\\u00e8" | "\\u00e9" | "\\u00ea" | "\\u00eb" | "\\u00ec" | "\\u00ed" | "\\u00ee" | "\\u00ef" | "\\u00f0" | "\\u00f1" | "\\u00f2" | "\\u00f3" | "\\u00f4" | "\\u00f5" | "\\u00f6" | "\\u00f7" | "\\u00f8" | "\\u00f9" | "\\u00fa" | "\\u00fb" | "\\u00fc" | "\\u00fd" | "\\u00fe" | "\\u00ff"
<NonGAPrefix> ::= "dev" | "ci" | "qc" | "alpha" | "beta" | "rc"
<NonGASuffix> ::= <NonGAPrefix> <NoWhitespace> [<NonGAVersion>]
<NonGAVersion> ::= "-" <NoWhitespace> <DigitsNoUnderscores> | "." <NoWhitespace> <DigitsNoUnderscores> | <DigitsNoUnderscores>
<NumericLiteral> ::= <IntegerLiteral> | <FloatingPointLiteral>
<Octal> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"
<OctalIndicator> ::= "O" | "o"
<OctalLiteral> ::= "0" <OctalIndicator> <Octals>
<OctalOrUnderscore> ::= <Octal> | "_"
<Octals> ::= <Octal> [<OctalsOrUnderscores>]
<OctalsOrUnderscores> ::= <OctalOrUnderscore> <OctalsOrUnderscoresRest>
<OctalsOrUnderscoresRest> ::= <OctalOrUnderscore> <OctalsOrUnderscoresRest> | ε
<OptionalDeclaration> ::= <Assignable> | <VariableTypeExpression> <Name>
<OptionalDeclarationList> ::= <OptionalDeclaration> <OptionalDeclarationListRest>
<OptionalDeclarationListRest> ::= "," <OptionalDeclaration> <OptionalDeclarationListRest> | ε
<OrExpression> ::= <AndExpression> <OrExpressionRest>
<OrExpressionRest> ::= "||" <AndExpression> | "^^" <AndExpression> <OrExpressionRest> | ε
<Parameter> ::= <TypeExpression> <Name> [<DefaultValue>]
<ParameterList> ::= "(" <Parameters> ")"
<Parameters> ::= <Parameter> <ParametersRest>
<ParametersRest> ::= "," <Parameter> <ParametersRest> | ε
<PathLiteral> ::= "Path:" <NoWhitespace> <Dir> <NoWhitespace> [<PathName>]
<PathName> ::= ["."] <NoWhitespace> <PathNameParts>
<PathNamePart> ::= <IdentifierTrails>
<PathNameParts> ::= <PathNamePart> <PathNamePartsRest>
<PathNamePartsRest> ::= <NoWhitespace> <PathNameSpecial> <NoWhitespace> <PathNamePart> <PathNamePartsRest> | ε
<PathNameSpecial> ::= "." | "-"
<PostfixExpression> ::= <PrimaryExpression> <PostfixExpressionRest>
<PostfixExpressionRest> ::= "++" | "--" | "(" [<Arguments>] ")" | <ArrayDims> | <ArrayIndexes> | <NoWhitespace> "?" | "." ["&"] <DotNameFinish> | ".new" <NewFinish> | ".as" "(" <AnyTypeExpression> ")" | ".is" "(" <AnyTypeExpression> ")" <PostfixExpressionRest> | ε
<PostfixTypeExpression> ::= <PrimaryTypeExpression> <PostfixTypeExpressionRest>
<PostfixTypeExpressionRest> ::= <NoWhitespace> "?" | <ArrayDims> | <ArrayIndexes> <PostfixTypeExpressionRest> | ε
<PrefixExpression> ::= <PostfixExpression> | "++" <PrefixExpression> | "--" <PrefixExpression> | "+" <PrefixExpression> | "-" <PrefixExpression> | "!" <PrefixExpression> | "~" <PrefixExpression>
<PrefixTypeExpression> ::= ["immutable"] [<Annotations>] <PostfixTypeExpression>
<PrimaryExpression> ::= "(" <Expression> ")" | "new" <NewFinish> | ["&"] ["construct"] <QualifiedName> [<TypeParameterTypeList>] | <StatementExpression> | <SwitchExpression> | <LambdaExpression> | "_" | <Literal>
<PrimaryTypeExpression> ::= "(" <ExtendedTypeExpression> ")" | <NamedTypeExpression> | <FunctionTypeExpression>
<PropertyAccessModifier> ::= <AccessModifier> | <AccessModifier> "/" <AccessModifier>
<PropertyDeclarationFinish> ::= ";" | <PropertyDeclarationInitialValue> | "." <Name> <Parameters> MethodBody [<PropertyDeclarationInitialValue>] | <TypeCompositionBody> [<PropertyDeclarationInitialValue>]
<PropertyDeclarationInitialValue> ::= "=" <Expression> ";"
<PropertyDeclarationStatement> ::= [<PropertyModifiers>] <TypeExpression> <Name> <PropertyDeclarationFinish>
<PropertyModifier> ::= "static" | <PropertyAccessModifier> | <Annotation>
<PropertyModifiers> ::= <PropertyModifier> <PropertyModifiersRest>
<PropertyModifiersRest> ::= <PropertyModifiers> <PropertyModifiersRest> | ε
<QualifiedName> ::= <Name> <QualifiedNameRest>
<QualifiedNameRest> ::= "." <Name> <QualifiedNameRest> | ε
<RangeExpression> ::= <BitwiseExpression> <RangeExpressionRest>
<RangeExpressionRest> ::= ".." <BitwiseExpression> <RangeExpressionRest> | ε
<RawCharacter> ::= <NoWhitespace> | <Whitespace>
<RawCharacters> ::= <RawCharacter> <RawCharactersRest>
<RawCharactersRest> ::= <RawCharacter> <RawCharactersRest> | ε
<RedundantReturnSpecifier> ::= "<" <TypeExpressionList> ">"
<RelationalExpression> ::= <AssignmentExpression> | <AssignmentExpression> "<=>" <AssignmentExpression> <RelationalExpressionRest>
<RelationalExpressionRest> ::= "<"   <AssignmentExpression> | "<="  <AssignmentExpression> | ">"   <AssignmentExpression> | ">="  <AssignmentExpression> <RelationalExpressionRest> | ε
<Resource> ::= <TypeExpression> <ResourceFinish>
<ResourceFinish> ::= <Name> | "_"
<ResourceList> ::= "inject" "(" [<ResourceListContents>] ")"
<ResourceListContents> ::= <Resources> [","]
<ResourceProvider> ::= [<ResourceList>] "using" <NamedTypeExpression>
<Resources> ::= <Resource> <ResourcesRest>
<ResourcesRest> ::= "," <Resource> <ResourcesRest> | ε
<ReturnList> ::= "void" | <SingleReturnList> | "(" <MultiReturnList> ")"
<ReturnStatement> ::= "return" [<ReturnValue>] ";"
<ReturnValue> ::= <TupleLiteral> | <ExpressionList>
<SafeCaseExpression> ::= "_" | <TernaryExpression>
<Seconds> ::= ":" <Digit> <Digit> [<SecondsFraction>]
<SecondsDuration> ::= <DigitsNoUnderscores> <NoWhitespace> "S"
<SecondsFraction> ::= "." <NoWhitespace> <Digits>
<Sign> ::= "+" | "-"
<SingleCharacter> ::= <InputCharacter> except \ or ' | <CharacterEscape>
<SingleReturnList> ::= <TypeExpression>
<Statement> ::= <TypeCompositionStatement> | <PropertyDeclarationStatement> | <MethodDeclarationStatement> | <VariableDeclaration> ";" | <Assignment> ";" | <LabeledStatement> | <AssertStatement> | <BreakStatement> | <ContinueStatement> | <DoStatement> | <ForStatement> | <IfStatement> | <ImportStatement> | <ReturnStatement> | <SwitchStatement> | <TryStatement> | <TypeDefStatement> | <UsingStatement> | <WhileStatement> | <Expression> ";" <StatementRest>
<StatementRest> ::= Block <StatementRest> | ε
<StatementBlock> ::= "{" <Statements> "}"
<StatementExpression> ::= <StatementBlock> | "throw" <TernaryExpression> | "TODO" [<TodoFinish>] | "assert"
<Statements> ::= <Statement> <StatementsRest>
<StatementsRest> ::= <Statement> <StatementsRest> | ε
<StringCharacter> ::= <InputCharacter> except \ or " | <CharacterEscape>
<StringLiteral> ::= '"' [<CharacterString>] '"' | '$"' [<CharacterString>] '"' | "\|" <FreeformLiteral> | "$|" <FreeformLiteral> | "$" <NoWhitespace> <File>
<SwitchBlock> ::= <SwitchLabels> <Statements> [<SwitchBlockFinish>]
<SwitchBlockFinish> ::= <BreakStatement> | <ContinueStatement>
<SwitchBlocks> ::= <SwitchBlock> <SwitchBlocksRest>
<SwitchBlocksRest> ::= <SwitchBlock> <SwitchBlocksRest> | ε
<SwitchCondition> ::= ε <SwitchConditionRest>
<SwitchConditionRest> ::= <Expression> | "," <SwitchConditionExpression> <SwitchConditionRest> | ε
<SwitchConditionExpression> ::= <VariableInitializer> | <Expression>
<SwitchExpression> ::= "switch" "(" [<SwitchCondition>] ")" "{" <SwitchExpressionBlocks> "}"
<SwitchExpressionBlock> ::= <SwitchLabels> <ExpressionList> ";"
<SwitchExpressionBlocks> ::= <SwitchExpressionBlock> <SwitchExpressionBlocksRest>
<SwitchExpressionBlocksRest> ::= <SwitchExpressionBlock> <SwitchExpressionBlocksRest> | ε
<SwitchLabel> ::= "case" <CaseOptionList> ":" | "default" ":"
<SwitchLabels> ::= <SwitchLabel> <SwitchLabelsRest>
<SwitchLabelsRest> ::= <SwitchLabel> <SwitchLabelsRest> | ε
<SwitchStatement> ::= "switch" "(" <SwitchCondition> ")" "{" <SwitchBlocks> "}"
<TernaryExpression> ::= <OrExpression> | <OrExpression> <Whitespace> "?" <TernaryExpression> ":" <TernaryExpression>
<TimeDuration> ::= "T" <NoWhitespace> [<HoursDuration>] <NoWhitespace> [<MinutesDuration>] <NoWhitespace> [<SecondsDuration>]
<TimeLiteral> ::= "Time:" <Digit> <Digit> <Digit> <Digit> "-" <Digit> <Digit> "-" <Digit> <Digit> "T" <Digit> <Digit> ":" <Digit> <Digit> [<Seconds>] [<TimeZone>]
<TimeOfDayLiteral> ::= "TimeOfDay:" <Digit> <Digit> ":" <Digit> <Digit> [<Seconds>]
<TimeZone> ::= "Z" | "+" <NoWhitespace> <Digit> <NoWhitespace> <Digit> <NoWhitespace> [<MinutesOffset>] | "-" <NoWhitespace> <Digit> <NoWhitespace> <Digit> <NoWhitespace> [<MinutesOffset>]
<TimeZoneLiteral> ::= "<TimeZone>:" <NoWhitespace> <TimeZone>
<TodoFinish> ::= <InputCharacter>-not-"(" <InputCharacters> <LineTerminator> | <NoWhitespace> "(" [<Expression>] ")"
<TryFinish> ::= <Catches> | [<Catches>] "finally" <StatementBlock>
<TryResources> ::= "(" <VariableInitializationList> ")"
<TryStatement> ::= "try" [<TryResources>] <StatementBlock> <TryFinish>
<TupleLiteral> ::= "(" <ExpressionList> "," <Expression> ")" | <TypeExpression> <NoWhitespace> ":" "(" [<ExpressionList>] ")"
<TypeAccessModifier> ::= "struct" | <AccessModifier>
<TypeCompositionBody> ::= "{" <EnumBody> "}" | "{" <TypeCompositionComponents> "}" | ";"
<TypeCompositionComponent> ::= [<AccessModifier>] <TypeDefStatement> | <ImportStatement> | <TypeCompositionStatement> | <PropertyDeclarationStatement> | <MethodDeclarationStatement>
<TypeCompositionComponents> ::= <ConditionalTypeCompositionComponent> <TypeCompositionComponentsRest>
<TypeCompositionComponentsRest> ::= <ConditionalTypeCompositionComponent> <TypeCompositionComponentsRest> | ε
<TypeCompositionStatement> ::= [<Modifiers>] <Category> <QualifiedName> [<TypeParameterList>] [<ParameterList>] [<Compositions>] <TypeCompositionBody>
<TypeDefStatement> ::= "typedef" <AnyTypeExpression> "as" <Name> ";"
<TypeExpression> ::= <IntersectingTypeExpression>
<TypeExpressionList> ::= ε <TypeExpressionListRest>
<TypeExpressionListRest> ::= Element | "," <TypeExpressionListElement> <TypeExpressionListRest> | ε
<TypeExpressionListElement> ::= <TypeParameterTypeList> | <ExtendedTypeExpression>
<TypeParameter> ::= <Name> [<TypeParameterConstraint>]
<TypeParameterConstraint> ::= "extends" <ExtendedTypeExpression>
<TypeParameterList> ::= "<" <TypeParameters> ">"
<TypeParameterTypeList> ::= "<" <TypeExpressionList> ">"
<TypeParameters> ::= <TypeParameter> <TypeParametersRest>
<TypeParametersRest> ::= "," <TypeParameter> <TypeParametersRest> | ε
<TypeValue> ::= <Expression>
<TypeValueList> ::= <TypeValue> <TypeValueListRest>
<TypeValueListRest> ::= "," <TypeValue> <TypeValueListRest> | ε
<TypeValueSet> ::= "{" <TypeValueList> "}"
<TypedNumericLiteral> ::= <IntTypeName> ":" <IntegerLiteral> | <FPTypeName> ":" <FPLiteral>
<UnionedTypeExpression> ::= <PrefixTypeExpression> <UnionedTypeExpressionRest>
<UnionedTypeExpressionRest> ::= "|" <PrefixTypeExpression> <UnionedTypeExpressionRest> | ε
<UnsignedIntegerLiteral> ::= <BitLiteral> | <OctalLiteral> | <DigitLiteral> | <HexitLiteral>
<UsingResource> ::= <OptionalDeclaration> "=" <Expression> | "(" <OptionalDeclarationList> "," <OptionalDeclaration> ")" "=" <Expression> | <Expression>
<UsingResources> ::= <UsingResource> <UsingResourcesRest>
<UsingResourcesRest> ::= "," <UsingResource> <UsingResourcesRest> | ε
<UsingStatement> ::= "using" "(" <UsingResources> ")" <StatementBlock>
<VariableDeclaration> ::= <VariableTypeExpression> <Name> [<VariableInitializerFinish>] | "(" <OptionalDeclarationList> "," <OptionalDeclaration> ")" "=" <Expression>
<VariableInitializationList> ::= <VariableInitializer> <VariableInitializationListRest>
<VariableInitializationListRest> ::= "," <VariableInitializer> <VariableInitializationListRest> | ε
<VariableInitializer> ::= <OptionalDeclaration> "=" <Expression> | "(" <OptionalDeclarationList> "," <OptionalDeclaration> ")" "=" <Expression>
<VariableInitializerFinish> ::= "=" <Expression>
<VariableModification> ::= <Assignment> | <Expression>
<VariableModificationList> ::= <VariableModification> <VariableModificationListRest>
<VariableModificationListRest> ::= "," <VariableModification> <VariableModificationListRest> | ε
<VariableTypeExpression> ::= "val" | "var" | <TypeExpression>
<Version> ::= ε <VersionRest>
<VersionRest> ::= <Literal> <VersionRest> | ε
<VersionFinish> ::= "-" <NoWhitespace> <NonGASuffix> | "." <NoWhitespace> <NonGASuffix> | <NonGASuffix>
<VersionLiteral> ::= "<Version>:" <NoWhitespace> <VersionString> | "v:" <NoWhitespace> <VersionString>
<VersionNumbers> ::= <DigitsNoUnderscores> <VersionNumbersRest>
<VersionNumbersRest> ::= <NoWhitespace> "." <NoWhitespace> <DigitsNoUnderscores> <VersionNumbersRest> | ε
<VersionOverride> ::= ε <VersionOverrideRest>
<VersionOverrideRest> ::= Verb <Versions> <VersionOverrideRest> | ε
<VersionOverrideVerb> ::= "allow" | "avoid" | "prefer"
<VersionOverrides> ::= <VersionOverride> <VersionOverridesRest>
<VersionOverridesRest> ::= "," <VersionOverride> <VersionOverridesRest> | ε
<VersionRequirement> ::= <Version> [<VersionOverrides>]
<VersionString> ::= <NonGASuffix> | <VersionNumbers> <NoWhitespace> [<VersionFinish>] <NoWhitespace> [<Build>]
<Versions> ::= <Version> <VersionsRest>
<VersionsRest> ::= "," <Version> <VersionsRest> | ε
<WhileStatement> ::= "while" "(" <ConditionList> ")" <StatementBlock>
<Whitespace> ::= "\t" | "\n" | "\x0b" | "\x0c" | "\r" | "\x1c" | "\x1d" | "\x1e" | "\x1f" | " " | "\x85" | "\xa0" | "\u1680" | "\u2000" | "\u2001" | "\u2002" | "\u2003" | "\u2004" | "\u2005" | "\u2006" | "\u2007" | "\u2008" | "\u2009" | "\u200a" | "\u2028" | "\u2029" | "\u202f" | "\u205f" | "\u3000"
<YearsDuration> ::= <DigitsNoUnderscores> <NoWhitespace> "Y"
