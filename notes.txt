*
*
*

Mandatory capabilites for client:
* didOpen
* didChange
* didClose

* Request: initialize capability

LangaugeServer
  initialize
  initlalized
  ..

  LanguageServer
    WorkspaceService
    TxtDocumentServer



<dependencies>
    <dependency>
        <groupId>org.eclipse.lsp4j</groupId>
        <artifactId>org.eclipse.lsp4j</artifactId>
        <version>0.12.0</version> <!-- Use the latest version -->
    </dependency>
    <dependency>
        <groupId>org.eclipse.lsp4j</groupId>
        <artifactId>org.eclipse.lsp4j.jsonrpc</artifactId>
        <version>0.12.0</version>
    </dependency>
</dependencies>

package com.example;

import org.eclipse.lsp4j.*;
import org.eclipse.lsp4j.services.LanguageServer;
import org.eclipse.lsp4j.services.TextDocumentService;
import org.eclipse.lsp4j.services.WorkspaceService;

public class SimpleLanguageServer implements LanguageServer {
    private final SimpleTextDocumentService textDocumentService = new SimpleTextDocumentService();

    @Override
    public CompletableFuture<InitializeResult> initialize(InitializeParams params) {
        ServerCapabilities capabilities = new ServerCapabilities();
        capabilities.setTextDocumentSync(TextDocumentSyncKind.Full);
        capabilities.setDocumentHighlightProvider(true);
        return CompletableFuture.completedFuture(new InitializeResult(capabilities));
    }

    @Override
    public CompletableFuture<Object> shutdown() {
        return CompletableFuture.completedFuture(null);
    }

    @Override
    public void exit() {
        System.exit(0);
    }

    @Override
    public TextDocumentService getTextDocumentService() {
        return textDocumentService;
    }

    @Override
    public WorkspaceService getWorkspaceService() {
        return new WorkspaceService() {
            // Implement workspace-related features if needed
        };
    }
}

package com.example;

import org.eclipse.lsp4j.*;
import org.eclipse.lsp4j.services.TextDocumentService;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class SimpleTextDocumentService implements TextDocumentService {

    @Override
    public CompletableFuture<List<? extends DocumentHighlight>> documentHighlight(DocumentHighlightParams params) {
        String uri = params.getTextDocument().getUri();
        String content = /* Read content from URI */;

        List<DocumentHighlight> highlights = /* Detect and create highlights */;
        return CompletableFuture.completedFuture(highlights);
    }

    // Implement other methods as required
}
package com.example;

import org.eclipse.lsp4j.launch.LSPLauncher;

public class Main {
    public static void main(String[] args) {
        SimpleLanguageServer server = new SimpleLanguageServer();
        LSPLauncher.createServerLauncher(server, System.in, System.out).startListening();
    }
}